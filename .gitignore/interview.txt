Created a list of interview questions for my purpose 

 1.What is method overloading?
 ans - Method overloading is also called compile time polymorphism, we use different methods with same name and 
 only difference is in type of data types, no of arguments etc.
 
 2.How do you handle divide-by-zero?
 and - Divide by zero is an arithmetic exception caused in java, it is handled by using try-catch block 

 3.Difference between == and .equals()?
 ans - Both are used to compare the values but difference is == compares the memory address of the object references
 and also it compares the value directly with the primitive data types, whereas .equals check actual value for  comparison.

 4.What are the basic data types in Java?
 ans -> Total 8 basic data types in java - byte, short, int, long, double, float, boolean, char.
  
 5.How is Scanner used for input?
 ans -> Scanner is a class in the java.util package used to read different types of input like
  int, double, String, etc., from various sources — most commonly from the keyboard (System.in).

 6.Explain the role of a loop.
 ans - > A loop in Java is used to execute a block of code repeatedly until a certain condition is met. 

 7.Difference between while and for loop?
 ans - for loop is mainly used when we know the no of iterations whereas in while loop
  there is no need for the no of iterations it works directly on the condition

 8.What is the JVM?
 ans - JVM stands for java virtual machine which is a part of JRE, JVM is responsible to execute the byte code(.class file)
 which make java as platform-independent language.

 9.How is Java platform-independent?
 ans - java is platform-independent because it converts the source code to byte code(.class file). This byte code is not machine specific 
 or any operating system. It can be executed on any system which has jvm installed in it 


 10.How do you debug a Java program
 ans - 1. I use IDE debugger - step-in/step-out over method calls
       2. print statement to check the values 
       3. Exception stack trace - read errors to locate issues
       4. Junit testing 


 Task -2 Question 

 1. What is Encapsulation?
Ans: Encapsulation is an OOP concept where data is bound to classes and accessed or modified through getters and setters. This helps in protecting the internal state of an object from unintended interference.

2. How are ArrayLists different from Arrays?
Ans: Arrays are fixed-size collections of elements of the same data type, whereas ArrayLists are dynamic and can grow or shrink at runtime. ArrayLists can only store objects, not primitive types.

3. How to sort an ArrayList?
Ans: You can use Collections.sort(arrayListName) to sort an ArrayList in ascending order.

4. What is Constructor Overloading?
Ans: Constructor overloading is a concept of polymorphism where multiple constructors with the same name exist in a class, but with different parameter types or numbers, allowing different ways of object initialization.

5. How does Garbage Collection work in Java?
Ans: Garbage Collection in Java is an automatic process that identifies and removes unused or unreachable objects from memory to free up resources and prevent memory leaks.

6. Why do we use Getters and Setters?
Ans: Getters and setters are used to implement encapsulation. They provide controlled access to the fields of a class, allowing validation and preventing direct modification of private data.

7. What is a Static Variable?
Ans: A static variable belongs to the class rather than any individual object. It is shared among all instances of the class and is initialized only once when the class is loaded.

8. What is the use of the Final Keyword?
Ans: The final keyword is used to restrict changes. It can be applied to variables (to prevent reassignment), methods (to prevent overriding), and classes (to prevent inheritance).

9. Difference between Compile-Time and Runtime Errors?
Ans:

Compile-time errors are detected by the compiler while the code is being compiled, such as syntax errors or missing references.

Runtime errors occur during program execution, such as NullPointerException or division by zero.

10. What are Access Modifiers?
Ans: Access modifiers define the visibility of classes, methods, and variables. Java provides four access modifiers:

public – accessible from anywhere

private – accessible only within the class

protected – accessible within the package and by subclasses

(default) – accessible only within the package

 


